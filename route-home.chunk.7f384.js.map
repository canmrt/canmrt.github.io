{"version":3,"sources":["webpack:///./routes/home/style.css","webpack:///./components/sequence/index.tsx","webpack:///./routes/home/index.tsx"],"names":["TypedSequence","options","this","TypedSequenceValidator","userInput","key","startsWith","Sequence","event","setState","pState","validator","validate","console","log","preventDefault","stopPropagation","document","addEventListener","_handleKeyDown","removeEventListener","state","split","map","Component","Home","class","style"],"mappings":"izDACe,EAAQ,cCUjBA,EACL,SAAYC,GACX,OADwB,mBAIL,IAHZ,EAAcC,KAAMD,IAMvBE,E,2DACL,SAASC,EAA0BC,GAElC,MAjBe,6BAiBCC,WADJF,EAAUA,UAAYC,O,KAwDrBE,E,YA9Cd,aAAc,iBACZ,gBADY,QAJN,IAAIP,EAAc,CAACI,UAAW,MAIxB,mBAFF,IAAID,GAEF,yBAIG,SAACK,GACjB,GAAiB,UAAdA,EAAMH,KAEQ,YAAdG,EAAMH,KAEQ,aAAdG,EAAMH,KAEQ,YAAdG,EAAMH,KAEQ,QAAdG,EAAMH,KAEQ,aAAdG,EAAMH,IAaT,OAVA,EAAKI,UAAS,SAACC,GACd,OAAG,EAAKC,UAAUC,SAASF,EAAQF,EAAMH,KACjC,CAACD,UAAWM,EAAON,UAAYI,EAAMH,KAErC,CAACD,UAAW,OAGrBS,QAAQC,IAAIN,GACZA,EAAMO,iBACNP,EAAMQ,mBACC,KA5BM,G,8RAgCd,WACCC,SAASC,iBAAiB,UAAWhB,KAAKiB,kB,kCAI3C,WACCF,SAASG,oBAAoB,UAAWlB,KAAKiB,kB,oBAG9C,WACE,OAAQ,uBAAMjB,KAAKmB,MAAMjB,UAAUkB,MAAM,IAAIC,KAAI,WAAC,OAAI,sC,GA/ClCC,aCfRC,UANF,kBACZ,mBAAKC,MAAOC,GACX,YAAC,EAAD","file":"route-home.chunk.7f384.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"home\":\"home__5d1wS\",\"test\":\"test__1dQLO\"};","import { Component, h } from 'preact';\nimport { Link } from 'preact-router/match';\n// @ts-ignore\nimport style from './style.css';\n\nconst ROTATION = 'yr124eFfeqeeeere1re23e124q'; \n\nclass Props{\n\n}\n\nclass TypedSequence {\n\tconstructor(options: any){\n\t\treturn Object.assign(this, options);\n\t}\n\n\tuserInput: string = '';\n}\n\nclass TypedSequenceValidator {\n\tvalidate(userInput: TypedSequence, key: string):boolean {\n\t\tlet value = userInput.userInput + key;\n\t\treturn ROTATION.startsWith(value);\n\t}\n}\n\nclass Sequence extends Component<Props, TypedSequence> {\n\tstate = new TypedSequence({userInput: ''});\n\n\tvalidator = new TypedSequenceValidator();\n\n\tconstructor() {\n\t  super();\n\t}\n\t\n\t_handleKeyDown = (event: KeyboardEvent) => {\n\t\tif(event.key === 'Shift')\n\t\t\treturn;\n\t\tif(event.key === 'Control')\n\t\t\treturn;\n\t\tif(event.key === 'AltGraph')\n\t\t\treturn;\n\t\tif(event.key === 'Control')\n\t\t\treturn;\n\t\tif(event.key === 'Alt')\n\t\t\treturn;\n\t\tif(event.key === 'CapsLock')\n\t\t\treturn;\n\n\t\tthis.setState((pState:TypedSequence)=>{\n\t\t\tif(this.validator.validate(pState, event.key)){\n\t\t\t\treturn {userInput: pState.userInput + event.key};\n\t\t\t} else {\n\t\t\t\treturn {userInput: ''};\n\t\t\t}\t\t\t \n\t\t});\n\t\tconsole.log(event);\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\t\treturn true;\n\t}\n  \n\t// Lifecycle: Called whenever our component is created\n\tcomponentDidMount() {\n\t\tdocument.addEventListener(\"keydown\", this._handleKeyDown);\n\t}\n  \n\t// Lifecycle: Called just before our component will be destroyed\n\tcomponentWillUnmount() {\n\t\tdocument.removeEventListener(\"keydown\", this._handleKeyDown);\n\t}\n  \n\trender() {\n\t  return (<div>{this.state.userInput.split('').map(x => <span>ðŸŸ¢</span>)}</div>);\n\t}\n}\n\nexport default Sequence;\n","import { h } from 'preact';\n// @ts-ignore\nimport style from './style.css';\nimport Sequence from '../../components/sequence';\n\nconst Home = () => (\t\n\t<div class={style.home}>\n\t\t<Sequence/>\n\t</div>\n);\n\nexport default Home;\n"],"sourceRoot":""}